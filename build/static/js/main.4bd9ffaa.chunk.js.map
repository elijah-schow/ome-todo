{"version":3,"sources":["Item.js","List.js","AddItem.js","App.js","serviceWorker.js","index.js"],"names":["Item","item","actions","useForm","handleSubmit","register","reset","errors","useState","editing","setEditing","defaultDue","due","format","Date","parse","defaultDone","done","className","classnames","key","id","onClick","onSubmit","data","updateItem","htmlFor","name","autoFocus","defaultValue","ref","required","description","type","checked","onChange","markItem","event","stopPropagation","aria-label","removeItem","aria-hidden","List","list","map","AddItem","action","open","setOpen","uuid","App","setList","addItem","concat","newItem","oldItem","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4bd9ffaa.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport classnames from 'classnames';\nimport { format } from 'date-fns';\n\nimport './Item.css';\n\nconst Item = ({ item, actions }) => {\n\n    const { handleSubmit, register, reset, errors } = useForm();\n\n    const [editing, setEditing] = useState(false);\n\n    /**\n     * Show the item editor\n     */\n    const open = () => {\n        // Don't re-render if the item is already open\n        if (editing) return;\n\n        // Show the editing form\n        setEditing(true);\n    };\n\n    /**\n     * Handle form submission\n     */\n    const onSubmit = ({ due, done, ...data }) => {\n        actions.updateItem({\n            id: item.id,\n            due: due ? new Date(due) : null,\n            done: done ? new Date(done) : null,\n            ...data,\n        });\n        setEditing(false);\n    };\n\n    /**\n     * Cancel changes and close the editor\n     */\n    const cancel = () => {\n        reset();\n        setEditing(false);\n    }\n\n    /**\n     * Prevent the event from bubbling up the DOM. In this case, it prevents\n     * clicking the checkbox from opening the item editor.\n     * \n     * @param {*} event \n     */\n    const stop = (event) => {\n        event.stopPropagation();\n    };\n\n    // Date fields require a specific string format to work\n    const defaultDue = item.due ? format(Date.parse(item.due), 'yyyy-MM-dd') : null;\n    const defaultDone = item.done ? format(Date.parse(item.done), 'yyyy-MM-dd') : null;\n\n    return (\n        <li\n            className={classnames(\n                \"item list-group-item\",\n                {\n                    \"list-group-item-action\": !editing,\n                    \"editing\": editing,\n                },\n            )}\n            key={item.id}\n            onClick={open}\n        >\n            {editing\n                ? (\n                    /**\n                     * Edit Mode\n                     */\n                    <form onSubmit={handleSubmit(onSubmit)}>\n\n                        {/* Name */}\n                        <div className=\"form-group\">\n                            <label htmlFor=\"name\">Name</label>\n                            <input\n                                id=\"name\"\n                                className={classnames(\n                                    \"form-control\",\n                                    {\n                                        \"is-invalid\": errors.name\n                                    })}\n                                name=\"name\"\n                                autoFocus\n                                defaultValue={item.name}\n                                ref={register({ required: true })}\n                            />\n                            {errors.name &&\n                                <div className=\"invalid-feedback d-block\">\n                                    Name is required\n                                </div>}\n                        </div>\n\n                        {/* Description */}\n                        <div className=\"form-group\">\n                            <label htmlFor=\"description\">Description</label>\n                            <textarea\n                                id=\"description\"\n                                className=\"form-control\"\n                                name=\"description\"\n                                defaultValue={item.description}\n                                ref={register}\n                            />\n                        </div>\n\n                        {/* Dates */}\n                        <div className=\"row\">\n\n                            {/* Due Date */}\n                            <div className=\"form-group col-6\">\n                                <label htmlFor=\"due\">Due</label>\n                                <input\n                                    type=\"date\"\n                                    id=\"due\"\n                                    className=\"form-control\"\n                                    name=\"due\"\n                                    defaultValue={defaultDue}\n                                    ref={register}\n                                />\n                            </div>\n\n                            {/* Done Date */}\n                            <div className=\"form-group col-6\">\n                                <label htmlFor=\"done\">Done</label>\n                                <input\n                                    type=\"date\"\n                                    id=\"done\"\n                                    className=\"form-control\"\n                                    name=\"done\"\n                                    defaultValue={defaultDone}\n                                    ref={register}\n                                />\n                            </div>\n\n                        </div>\n\n                        {/* Buttons */}\n                        <div className=\"row\">\n                            <div className=\"col\">\n                                <button className=\"btn btn-primary btn-block\">Save</button>\n                            </div>\n                            <div className=\"col\">\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-secondary btn-block\"\n                                    onClick={cancel}\n                                >Cancel</button>\n                            </div>\n                        </div>\n\n                    </form>\n                )\n                : (\n                    /**\n                     * View Mode\n                     */\n                    <div className=\"row\">\n\n                        {/* Checkbox */}\n                        <div className=\"col col-auto\">\n                            <div className=\"form-check\">\n                                <input\n                                    type=\"checkbox\"\n                                    className=\"form-check-input\"\n                                    /* Cast `done` to a boolean, otherwise react\n                                    will complain about switching between\n                                    controlled and uncontrolled inputs.\n                                    https://fb.me/react-controlled-components */\n                                    checked={!!item.done}\n                                    onChange={() => actions.markItem(item.id)}\n                                    onClick={stop}\n                                />\n                            </div>\n                        </div>\n\n                        {/* Dates */}\n                        <div className=\"col\">\n                            <div className=\"item-name\">{item.name}</div>\n                            {item.description &&\n                                <div className=\"item-description\">\n                                    {item.description}\n                                </div>}\n                            {(item.due || item.done) &&\n                                <div className=\"item-dates\">\n                                    {/* Done */}\n                                    {item.done && <span>Done {\n                                        format(Date.parse(item.done), 'PP')\n                                    }</span>}\n                                    {/* Interpunct */}\n                                    {item.due && item.done && <span> &middot; </span>}\n                                    {/* Due */}\n                                    {item.due && <span>Due {\n                                        format(Date.parse(item.due), 'PP')\n                                    }</span>}\n                                </div>}\n                        </div>\n\n                        {/* Delete */}\n                        <div className=\"col col-auto\">\n                            <button\n                                type=\"button\"\n                                className=\"close\"\n                                aria-label=\"close\"\n                                onClick={() => actions.removeItem(item.id)}\n                            >\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div>\n                    </div>\n                )}\n        </li>\n    );\n}\n\nItem.propTypes = {\n    item: PropTypes.object.isRequired,\n    actions: PropTypes.object.isRequired,\n}\n\nexport default Item;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Item from './Item';\n\nconst List = ({ list, actions }) => {\n    return (\n        <ul className=\"list list-group\">\n            {list.map((item) => <Item key={item.id} item={item} actions={actions} />)}\n        </ul>\n    );\n};\n\nList.propTypes = {\n    list: PropTypes.array.isRequired,\n    actions: PropTypes.object.isRequired,\n};\n\nexport default List;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport { v4 as uuid } from 'uuid';\nimport classnames from 'classnames';\n\nconst AddItem = ({ action }) => {\n\n    const { handleSubmit, register, reset, errors } = useForm();\n\n    const [open, setOpen] = useState(false);\n\n    /**\n     * Show the add item form\n     */\n    const onOpen = () => {\n        setOpen(true);\n    };\n\n    /**\n     * Handle form submission\n     * \n     * @param {Object} data\n     */\n    const onSubmit = (data) => {\n        action({\n            id: uuid(),\n            ...data,\n        });\n        reset();\n        setOpen(false);\n    };\n\n    return open\n        ? (\n            <form onSubmit={handleSubmit(onSubmit)} className=\"card card-body mb-4\">\n\n                {/* Name */}\n                <div className=\"form-group\">\n                    <label htmlFor=\"name\">Name</label>\n                    <input\n                        id=\"name\"\n                        className={classnames(\n                            \"form-control\",\n                            {\n                                \"is-invalid\": errors.name\n                            })}\n                        name=\"name\"\n                        autoFocus\n                        ref={register({ required: true })}\n                    />\n                    {errors.name &&\n                        <div className=\"invalid-feedback d-block\">\n                            Name is required\n                        </div>}\n                </div>\n\n                {/* Description */}\n                <div className=\"form-group\">\n                    <label htmlFor=\"description\">Description</label>\n                    <textarea\n                        id=\"description\"\n                        className=\"form-control\"\n                        name=\"description\"\n                        ref={register}\n                    />\n                </div>\n\n                {/* Dates */}\n                <div className=\"row\">\n\n                    {/* Due Date */}\n                    <div className=\"form-group col-6\">\n                        <label htmlFor=\"due\">Due</label>\n                        <input\n                            type=\"date\"\n                            id=\"due\"\n                            className=\"form-control\"\n                            name=\"due\"\n                            ref={register}\n                        />\n                    </div>\n\n                    {/* Done Date */}\n                    <div className=\"form-group col-6\">\n                        <label htmlFor=\"done\">Done</label>\n                        <input\n                            type=\"date\"\n                            id=\"done\"\n                            className=\"form-control\"\n                            name=\"done\"\n                            ref={register}\n                        />\n                    </div>\n\n                </div>\n\n                {/* Submit */}\n                <button className=\"btn btn-primary btn-block\">Add</button>\n\n            </form>\n        )\n        : (\n            <button\n                type=\"button\"\n                className=\"btn btn-primary btn-block mb-3\"\n                onClick={onOpen}\n            >Add</button>\n        );\n};\n\nAddItem.propTypes = {\n    action: PropTypes.func.isRequired,\n};\n\nexport default AddItem;","import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport './App.css';\nimport List from './List';\nimport AddItem from './AddItem';\n\nfunction App() {\n  const [list, setList] = useState([]);\n\n  const actions = {\n\n    /**\n     * Add an item to the top of the list.\n     * \n     * @param {Object} item\n     */\n    addItem: (item) => {\n      setList([item].concat(list));\n    },\n\n    /**\n     * Update an item in the list\n     * \n     * @param {Object} newItem\n     */\n    updateItem: (newItem) => {\n      setList(list.map(oldItem => oldItem.id === newItem.id\n        ? newItem\n        : oldItem));\n    },\n\n    /**\n     * Remove an item from the list\n     * \n     * @param {String} id\n     */\n    removeItem: (id) => {\n      setList(list.filter(item => item.id !== id));\n    },\n\n    /**\n     * Toggle the item between done and not done.\n     * \n     * @param {String} id\n     */\n    markItem: (id) => {\n      setList(\n        list.map((item) => {\n\n          // Exit if this is not the item we're looking for\n          if (item.id !== id) return item;\n\n          // `null` means not done, and a date value means done\n          const done = item.done\n            ? null\n            : new Date();\n\n          // Return the new item object\n          return { ...item, done };\n\n        })\n      );\n    },\n\n  };\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">To Do List</h1>\n      <AddItem action={actions.addItem} />\n      <List list={list} actions={actions} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}